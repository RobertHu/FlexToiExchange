<Application x:Class="FlexInterfaceManager.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
              xmlns:local2="clr-namespace:FlexInterfaceManager"
              xmlns:local="clr-namespace:FlexInterfaceManager.Model"
             Startup="Application_Startup" >
    <Application.Resources>

        <Style x:Key="DatePickerStyle" TargetType="DatePicker">
            <Setter Property="Height" Value="25"></Setter>
            <Setter Property="Width" Value="200"></Setter>
            <Setter Property="VerticalAlignment" Value="Center"></Setter>
        </Style>

        <Style x:Key="ComboxStyle" TargetType="ComboBox">
            <Setter Property="Height" Value="30"></Setter>
            <Setter Property="Width" Value="200"></Setter>
            <Setter Property="VerticalAlignment" Value="Center"></Setter>
            <Setter Property="IsSynchronizedWithCurrentItem" Value="True"></Setter>
        </Style>

        <Style x:Key="TextblockStyle" TargetType="TextBlock">
            <Setter Property="Width" Value="110"></Setter>
            <Setter Property="VerticalAlignment" Value="Center"></Setter>

        </Style>


        <Style x:Key="StackPanelStyle" TargetType="StackPanel">
            <Setter Property="Orientation" Value="Horizontal"></Setter>
            <Setter Property="Height" Value="150"></Setter>
            <Setter Property="VerticalAlignment" Value="Center"></Setter>
        </Style>

        <Style x:Key="StackPanelStyle_CustomerFund" TargetType="StackPanel">
            <Setter Property="Orientation" Value="Horizontal"></Setter>

            <Setter Property="VerticalAlignment" Value="Center"></Setter>
        </Style>

        <DataTemplate x:Key="FundTemplate" DataType="{x:Type local:AccountSelectData}" >
            <StackPanel Orientation="Horizontal"  Margin="10" >
                <CheckBox IsChecked="{Binding IsChecked, Mode=TwoWay}" ></CheckBox>
                <TextBlock Text="{Binding Code}"></TextBlock>
            </StackPanel>
        </DataTemplate>
        <Style x:Key="QueryButton" TargetType="Button">
            <Setter Property="Margin" Value="0,5,20,5"></Setter>
            <Setter Property="MinHeight" Value="30"></Setter>
            <Setter Property="Width" Value="75"></Setter>
            <Setter Property="HorizontalAlignment" Value="Left"></Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsMouseOver" Value="true"></Condition>
                        <Condition Property="IsPressed" Value="false"></Condition>
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="#FF809FDC"></Setter>
                </MultiTrigger>
            </Style.Triggers>
        </Style>
        <HierarchicalDataTemplate DataType="{x:Type local:TopAccountGroupModel}" ItemsSource="{Binding AccountGroups}">
            <StackPanel Orientation="Horizontal">
                <CheckBox IsChecked="{Binding IsChecked, Mode=TwoWay}"></CheckBox>
                <TextBlock Text="{Binding Code}"></TextBlock>
            </StackPanel>
        </HierarchicalDataTemplate>
        <HierarchicalDataTemplate DataType="{x:Type local:AccountGroupModel}" ItemsSource="{Binding Accounts}">
            <StackPanel Orientation="Horizontal">
                <CheckBox IsChecked="{Binding IsChecked, Mode=TwoWay}"></CheckBox>
                <TextBlock Text="{Binding Code}"></TextBlock>
            </StackPanel>
        </HierarchicalDataTemplate>
        <DataTemplate DataType="{x:Type local:AccountModel}">
            <StackPanel Orientation="Horizontal">
                <CheckBox IsChecked="{Binding IsChecked, Mode=TwoWay}"></CheckBox>
                <TextBlock Text="{Binding ComposedCode}"></TextBlock>
            </StackPanel>
        </DataTemplate>
        <Style x:Key="ValidateStyle_TextBox" TargetType="TextBox"  >
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="true">
                    <Trigger.Setters>
                        <Setter Property="ToolTip"  Value="{Binding RelativeSource={RelativeSource Self}, 
                       Path=(Validation.Errors)[0].ErrorContent}"  >
                        </Setter>
                    </Trigger.Setters>
                </Trigger>
            </Style.Triggers>
        </Style>

        <local2:ViewModelLocator x:Key="ViewModelLocator"></local2:ViewModelLocator>
    </Application.Resources>
</Application>
